//
//  PMManager.h
//  PayMillSDK
//
//  Created by PayMill on 2/22/13.
//  Copyright (c) 2013 PayMill. All rights reserved.
//
#import "PMManager.h"
#import "PMPaymentMethod.h"
#import "PMPaymentParams.h"
#import "PMError.h"
#import "PMTransaction.h"
#import "PMPreauthorization.h"

//Block callbacks
/*Get non consumed transactions*/
typedef void (^OnNotConsumedTransactionsSuccess)(NSArray *notConsumedTransactions);
typedef void (^OnNotConsumedTransactionsFailure)(PMError *error);
/*Get non cosumed preauthorizations*/
typedef void (^OnNotConsumedPreauthorizationsSuccess)(NSArray *notConsumedPreauthorizations);
typedef void (^OnNotConsumedPreauthorizationsFailure)(PMError *error);
/*Create tokeken*/
typedef void (^OnTokenSuccess)(NSString* token);
typedef void (^OnTokenFailure)(PMError *error);
/*Create Transaction*/
typedef void (^OnTransactionSuccess)(PMTransaction* transaction);
typedef void (^OnTransactionFailure)(PMError *error);
/*Create Preauthorization*/
typedef void (^OnPreauthorizationSuccess)(PMTransaction* transaction);
typedef void (^OnPreauthorizationFailure)(PMError *error);
/*Create Payment*/
typedef void (^OnPaymentSuccess)(PMPayment* payment);
typedef void (^OnPaymentFailure)(PMError *error);
/*Get Transactions*/
typedef void (^OnTransactionsListSuccess)(NSArray* transactions);
typedef void (^OnTransactionsListFailure)(PMError *error);
/*Get Prauthorizations*/
typedef void (^OnPreauthorizationsListSuccess)(NSArray* preauthorizations);
typedef void (^OnPreauthorizationsListFailure)(PMError *error);
/*Get Payments*/
typedef void (^OnPaymentsListSuccess)(NSArray* payments);
typedef void (^OnPaymentsListFailure)(PMError *error);
/*Get new Device Id*/
typedef void(^OnDeviceIdSucces)(NSString *devicId);
typedef void(^OnDeviceIdFailure)(PMError *error);
/*Init*/
typedef void(^OnInit)(BOOL success, PMError *error);
/*Consume transaction/preauthorization*/
typedef void(^OnConsumeSuccess)(NSString * id);
typedef void(^OnConsumeFailure)(PMError * error);
/**
 This class is the main entry point for all SDK calls.
 */
@interface PMManager : NSObject
/**
 Initializes the SDK. This should always be the first call you make, when you use the SDK.
 @param testMode true for TEST mode, false for LIVE mode.
 @param merchantPublicKey your PayMill public key for LIVE or TEST mode, depending on the previous parameter.
 @param newDeviceId an optional deviceID.
 Note: You cannot specify an arbitrary string. The device ID must have been generated by the SDK, for example with getNewDeviceId() . You can use this parameter to associate end users in your applications with SDK deviceIDs.If you don't specify a device ID, the SDK will generate one and save it for later use.
 @param init block function of type OnInit that will be called on success or failure
 */
+(void) initWithTestMode:(BOOL)testmode merchantPublicKey:(NSString*)merchantPublicKey newDeviceId:(NSString*)newDeviceId
					init:(OnInit)onInit;
/**
 Initializes the SDK. This should always be the first call you make, when you use the SDK.
 @param testMode true for TEST mode, false for LIVE mode.
 @param merchantPublicKey your PayMill public key for LIVE or TEST mode, depending on the previous parameter.
 @param newDeviceId an optional deviceID.
 Note: You cannot specify an arbitrary string. The device ID must have been generated by the SDK, for example with getNewDeviceId() . You can use this parameter to associate end users in your applications with SDK deviceIDs.If you don't specify a device ID, the SDK will generate one and save it for later use.
 @param init block callback that will be called on success or failure
 @param successTranBlock optional block callback for getting all not consumed PMTrаnsaction objects. The block will be called on success.
 @param failureTranBlock optional block callback that will be called on failure when getting all not consumed PMTrаnsaction objects.
 @param successPreauthBlock optional block callback for getting all not consumed PMPreauthorization objects. The block will be called on success.
 @param failurePreauthBlock  optional block callback that will be called on failure when getting all not consumed PMPreauthorization objects.
*/
+(void) initWithTestMode:(BOOL)testmode merchantPublicKey:(NSString*)merchantPublicKey newDeviceId:(NSString*)newDeviceId
					init:(OnInit)onInit success:(OnNotConsumedTransactionsSuccess)successTranBlock
				 failure:(OnNotConsumedTransactionsFailure)failureTranBlock
				 success:(OnNotConsumedPreauthorizationsSuccess)successPreauthBlock
				 failure:(OnNotConsumedPreauthorizationsFailure)failurePreauthBlock;

/**
 Creates a new PMPreauthorization.
 @param method PMPaymentMethod created with PMFactory.
 @param parameters PMPaymentParams created with PMFactory.
 @param consumable true if you want to consume the preauthorization later, false otherwise.
 @param success a block callback that is executed when the preauthorization is created succesfully.
 @param failure a block callback that is executed when the preauthorization creation failed.
 */
+(void) preauthorizationWithMethod:(id<PMPaymentMethod>)method parameters:(PMPaymentParams*)params consumable:(BOOL)consumable
						   success:(OnPreauthorizationSuccess)successBlock
						   failure:(OnPreauthorizationFailure)failureBlock;

/**
 Creates a new PMTransaction.
 @param method PMPaymentMethod created with PMFactory.
 @param parameters PMPaymentParams created with PMFactory.
 @param consumable true if you want to consume the preauthorization later, false otherwise.
 @param success a block callback that is executed when the transaction is created succesfully.
 @param failure a block callback that is executed when the transaction creation failed.
 */
+(void) transactionWithMethod:(id<PMPaymentMethod>)method parameters:(PMPaymentParams*)params consumable:(BOOL)consumable
					  success:(OnTransactionSuccess)successBlock
					  failure:(OnTransactionFailure)failureBlock;

/**
 Creates a new PMPreauthorization.
 @param token a previously generated token.
 @param parameters PMPaymentParams created with PMFactory.
 @param consumable true if you want to consume the preauthorization later, false otherwise.
 @param success a block callback that is executed when the preauthorization is created succesfully.
 @param failure a block callback that is executed when the preauthorization creation failed.
 */
+(void) preauthorizationWithToken:(NSString*)token parameters:(PMPaymentParams*)params consumable:(BOOL)consumable
						  success:(OnPreauthorizationSuccess)successBlock
						  failure:(OnPreauthorizationFailure)failureBlock;

/**
 Creates a new PMTransaction.
 @param token a previously generated token.
 @param parameters PMPaymentParams created with PMFactory.
 @param consumable true if you want to consume the preauthorization later, false otherwise.
 @param success a block callback that is executed when the transaction is created succesfully.
 @param failure a block callback that is executed when the transaction creation failed.
 */
+(void) transactionWithToken:(NSString*)token parameters:(PMPaymentParams*)params consumable:(BOOL)consumable
					 success:(OnTransactionSuccess)successBlock
					 failure:(OnTransactionFailure)failureBlock;

/**
 Creates a new token.
 @param method PMPaymentMethod created with PMFactory.
 @param parameters PMPaymentParams created with PMFactory.
 @param success a block callback that is executed when the token is created succesfully.
 @param failure a block callback that is executed when the token creation failed.
 */
+(void) generateTokenWithMethod:(id<PMPaymentMethod>)method parameters:(PMPaymentParams*)params
						success:(OnTokenSuccess)successBlock
						failure:(OnTokenFailure)failureBlock;
/**
 Lists all transactions for the configured deviceId.
 @param success a block callback that is executed when the transactions were listed succesfully.
 @param failure a block callback that is executed when the listing the transactions failed.
 */
+(void) getTransactionsList:
(OnTransactionsListSuccess)successBlock
					failure:(OnTransactionFailure)failureBlock;

/**
 Get a specific PMTransaction.
 @param transactionId the id of the transaction.
 @param success a block callback that is executed when the transaction is get succesfully.
 @param failure a block callback that is executed when the transaction getting failed.
 */
+(void) getTransactionForId:(NSString*)transactionId
					success:(OnTransactionSuccess)successBlock
					failure:(OnTransactionFailure)failureBlock;

/**
 Lists all preauthorizations for the configured deviceId.
 @param success a block callback that is executed when the preauthorizations were listed succesfully.
 @param failure a block callback that is executed when the listing the preauthorizations failed.
 */
+(void) getPreauthorizationsList:
(OnPreauthorizationsListSuccess)successBlock
					   onFailure:(OnPreauthorizationsListFailure)failureBlock;

/**
 Get a specific PMPreauthorization.
 @param transactionId the id of the transaction.
 @param success a block callback that is executed when the preauthorization is get succesfully.
 @param failure a block callback that is executed when the preauthorization getting failed.
 */
+(void) getPreauthorzationForId:(NSString*)preauthorizationId
						success:(OnPreauthorizationSuccess)successBlock
						failure:(OnPreauthorizationFailure)failureBlock;

/**
 Lists all not consumed PMTransaction objects for the configured deviceId.
 @param success a block callback that is executed when the transactions were listed succesfully.
 @param failure a block callback that is executed when the listing the transactions failed.
 */
+(void) getNonConsumedTransactionsList:
(OnNotConsumedTransactionsSuccess)successBlock
							   failure:(OnNotConsumedTransactionsFailure)failureBlock;

/**
 Lists all not consumed PMPreauthorization objects for the configured deviceId.
 @param success a block callback that is executed when the preauthorizations were listed succesfully.
 @param failure a block callback that is executed when the listing the preauthorizations failed.
 */
+(void) getNonConsumedPreauthorizationsList:(OnNotConsumedPreauthorizationsSuccess)successBlock
									failure:(OnNotConsumedPreauthorizationsFailure)failureBlock;

/**
 Consume the given transaction. After successful consumption, the transaction will no longer appear in the list of not consumed.
 @param transactionId the id of the transaction.
 @param success a block callback that is executed when the transaction is consumed succesfully.
 @param failure a block callback that is executed when the transaction conumption failed.
 */
+(void) consumeTransactionForId:(NSString*)transactionId
						success:(OnConsumeSuccess)successBlock
						failure:(OnConsumeFailure)failureBlock;

/**
 Consume the given preauthorization. After successful consumption, the preauthorization will no longer appear in the list of not consumed.
 @param preauthorizationId the id of the preauthorization.
 @param success a block callback that is executed when the preauthorization is consumed succesfully.
 @param failure a block callback that is executed when the preauthorization conumption failed.
 */
+(void) consumePreauthorizationForId:(NSString*)preauthorizationId
							 success:(OnConsumeSuccess)successBlock
							 failure:(OnConsumeFailure)failureBlock;

/**
 Creates new device id.
 @param success a block callback that is executed when the new device id is created succesfully.
 @param failure a block callback that is executed when the device id creation failed.
 */
+(void)getNewDeviceIdSuccess:(OnDeviceIdSucces)successBlock
					 failure:(OnDeviceIdFailure)failureBlock;

/**
 Returns the current device id.
 @return the id or null if none is set.
 */
+(NSString*)getDeviceId;
@end
